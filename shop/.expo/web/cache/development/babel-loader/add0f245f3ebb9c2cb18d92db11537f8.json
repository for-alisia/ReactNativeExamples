{"ast":null,"code":"export var isRequired = function isRequired(val) {\n  return val.trim().length !== 0;\n};\nexport var isEmail = function isEmail(val) {\n  var emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return emailRegex.test(val.toLowerCase());\n};\nexport var isLarger = function isLarger(num, val) {\n  return +val >= num;\n};\nexport var isSmaller = function isSmaller(num, val) {\n  return +val <= num;\n};\nexport var isLonger = function isLonger(num, val) {\n  return val.trim().length >= num;\n};","map":{"version":3,"sources":["/Users/alisia/Projects/ReactNative/shop/utils/validators.js"],"names":["isRequired","val","trim","length","isEmail","emailRegex","test","toLowerCase","isLarger","num","isSmaller","isLonger"],"mappings":"AAAA,OAAO,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAACC,GAAD,EAAS;AACjC,SAAOA,GAAG,CAACC,IAAJ,GAAWC,MAAX,KAAsB,CAA7B;AACD,CAFM;AAIP,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACH,GAAD,EAAS;AAC9B,MAAMI,UAAU,GACd,yJADF;AAEA,SAAOA,UAAU,CAACC,IAAX,CAAgBL,GAAG,CAACM,WAAJ,EAAhB,CAAP;AACD,CAJM;AAMP,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,GAAD,EAAMR,GAAN,EAAc;AACpC,SAAO,CAACA,GAAD,IAAQQ,GAAf;AACD,CAFM;AAIP,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACD,GAAD,EAAMR,GAAN,EAAc;AACrC,SAAO,CAACA,GAAD,IAAQQ,GAAf;AACD,CAFM;AAIP,OAAO,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAACF,GAAD,EAAMR,GAAN,EAAc;AACpC,SAAOA,GAAG,CAACC,IAAJ,GAAWC,MAAX,IAAqBM,GAA5B;AACD,CAFM","sourcesContent":["export const isRequired = (val) => {\n  return val.trim().length !== 0;\n};\n\nexport const isEmail = (val) => {\n  const emailRegex =\n    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return emailRegex.test(val.toLowerCase());\n};\n\nexport const isLarger = (num, val) => {\n  return +val >= num;\n};\n\nexport const isSmaller = (num, val) => {\n  return +val <= num;\n};\n\nexport const isLonger = (num, val) => {\n  return val.trim().length >= num;\n};\n"]},"metadata":{},"sourceType":"module"}