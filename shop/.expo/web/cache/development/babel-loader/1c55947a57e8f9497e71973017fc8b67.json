{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/alisia/Projects/ReactNative/shop/screens/shop/OrdersScreen.jsx\";\n\nimport React, { useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { HeaderButtons, Item } from 'react-navigation-header-buttons';\nimport { SbHeaderButton, SbHeading, SbLoading, SbError } from \"../../components/ui\";\nimport { OrderItem } from \"../../components/shop\";\nimport { getOrders } from \"../../store/orders.slice\";\nimport theme from \"../../theme\";\n\nvar OrdersScreen = function OrdersScreen(_ref) {\n  var navigation = _ref.navigation;\n  var orders = useSelector(function (state) {\n    return state.orders.orders;\n  });\n  var isLoading = useSelector(function (state) {\n    return state.orders.isLoading;\n  });\n  var error = useSelector(function (state) {\n    return state.orders.error;\n  });\n  var dispatch = useDispatch();\n  useEffect(function () {\n    dispatch(getOrders());\n  }, [dispatch]);\n\n  var renderItem = function renderItem(itemData) {\n    var item = itemData.item;\n    return React.createElement(OrderItem, {\n      id: item.id,\n      items: item.items,\n      date: item.date,\n      total: item.total,\n      status: item.status,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }\n    });\n  };\n\n  if (isLoading) return React.createElement(SbLoading, {\n    color: theme.colors.primary,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 25\n    }\n  });\n  if (error) return React.createElement(SbError, {\n    errorText: error,\n    buttonText: \"\\u041F\\u043E\\u043F\\u0440\\u043E\\u0431\\u043E\\u0432\\u0430\\u0442\\u044C \\u0441\\u043D\\u043E\\u0432\\u0430\",\n    buttonHandler: function buttonHandler() {\n      dispatch(getOrders());\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  });\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, React.createElement(SbHeading, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, \"\\u0412\\u0430\\u0448\\u0438 \\u0437\\u0430\\u043A\\u0430\\u0437\\u044B\"), React.createElement(FlatList, {\n    data: orders,\n    renderItem: renderItem,\n    refreshing: isLoading,\n    onRefresh: function onRefresh() {\n      dispatch(getOrders());\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: theme.padding.s\n  }\n});\n\nOrdersScreen.navigationOptions = function (navData) {\n  return {\n    headerTitle: 'Ваши заказы',\n    headerLeft: function headerLeft() {\n      return React.createElement(HeaderButtons, {\n        HeaderButtonComponent: SbHeaderButton,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 7\n        }\n      }, React.createElement(Item, {\n        iconName: Platform.OS === 'android' ? 'md-menu' : 'ios-menu',\n        title: \"\\u041C\\u0435\\u043D\\u044E\",\n        onPress: function onPress() {\n          navData.navigation.toggleDrawer();\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 9\n        }\n      }));\n    }\n  };\n};\n\nexport default OrdersScreen;","map":{"version":3,"sources":["/Users/alisia/Projects/ReactNative/shop/screens/shop/OrdersScreen.jsx"],"names":["React","useEffect","useSelector","useDispatch","HeaderButtons","Item","SbHeaderButton","SbHeading","SbLoading","SbError","OrderItem","getOrders","theme","OrdersScreen","navigation","orders","state","isLoading","error","dispatch","renderItem","itemData","item","id","items","date","total","status","colors","primary","styles","container","StyleSheet","create","paddingHorizontal","padding","s","navigationOptions","navData","headerTitle","headerLeft","Platform","OS","toggleDrawer"],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport React, { useEffect } from 'react';\nimport { View, StyleSheet, FlatList, Platform } from 'react-native';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { HeaderButtons, Item } from 'react-navigation-header-buttons';\n\n// Components\nimport { SbHeaderButton, SbHeading, SbLoading, SbError } from '../../components/ui';\nimport { OrderItem } from '../../components/shop';\n\n// Actions\nimport { getOrders } from '../../store/orders.slice';\n\n// Theme\nimport theme from '../../theme';\n\nconst OrdersScreen = ({ navigation }) => {\n  const orders = useSelector((state) => state.orders.orders);\n  const isLoading = useSelector((state) => state.orders.isLoading);\n  const error = useSelector((state) => state.orders.error);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getOrders());\n  }, [dispatch]);\n\n  const renderItem = (itemData) => {\n    const { item } = itemData;\n    return (\n      <OrderItem\n        id={item.id}\n        items={item.items}\n        date={item.date}\n        total={item.total}\n        status={item.status}\n      />\n    );\n  };\n  if (isLoading) return <SbLoading color={theme.colors.primary} />;\n  if (error)\n    return (\n      <SbError\n        errorText={error}\n        buttonText=\"Попробовать снова\"\n        buttonHandler={() => {\n          dispatch(getOrders());\n        }}\n      />\n    );\n  return (\n    <View style={styles.container}>\n      <SbHeading>Ваши заказы</SbHeading>\n      <FlatList\n        data={orders}\n        renderItem={renderItem}\n        refreshing={isLoading}\n        onRefresh={() => {\n          dispatch(getOrders());\n        }}\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: theme.padding.s,\n  },\n});\n\nOrdersScreen.navigationOptions = (navData) => {\n  return {\n    headerTitle: 'Ваши заказы',\n    headerLeft: () => (\n      <HeaderButtons HeaderButtonComponent={SbHeaderButton}>\n        <Item\n          iconName={Platform.OS === 'android' ? 'md-menu' : 'ios-menu'}\n          title=\"Меню\"\n          onPress={() => {\n            navData.navigation.toggleDrawer();\n          }}\n        />\n      </HeaderButtons>\n    ),\n  };\n};\n\nexport default OrdersScreen;\n"]},"metadata":{},"sourceType":"module"}