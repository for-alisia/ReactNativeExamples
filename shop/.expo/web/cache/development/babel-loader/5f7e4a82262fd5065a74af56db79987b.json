{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { createSlice } from '@reduxjs/toolkit';\nimport { ordersAPI } from \"../fetchAPI\";\nvar initialState = {\n  orders: [],\n  isLoading: false,\n  error: null,\n  isSuccessed: false\n};\nvar orderSlice = createSlice({\n  name: 'orders',\n  initialState: initialState,\n  reducers: {\n    startLoading: function startLoading(state) {\n      console.log('Is Loading was set');\n      state.isLoading = true;\n      state.error = null;\n      state.isSuccessed = false;\n    },\n    setError: function setError(state, _ref) {\n      var payload = _ref.payload;\n      state.error = payload;\n      state.isLoading = false;\n      state.isSuccessed = false;\n    },\n    setOrders: function setOrders(state, _ref2) {\n      var payload = _ref2.payload;\n      state.orders = payload;\n      state.isLoading = false;\n      state.error = null;\n      state.isSuccessed = false;\n    },\n    orderAdded: function orderAdded(state, _ref3) {\n      var payload = _ref3.payload;\n      state.orders.push(payload);\n      state.isLoading = false;\n      state.error = null;\n      state.isSuccessed = true;\n    }\n  }\n});\nexport var orderActions = orderSlice.actions;\nexport var addOrder = function addOrder(_ref4) {\n  var items = _ref4.items,\n      total = _ref4.total;\n  return function _callee(dispatch) {\n    var orderToCreate, newOrder;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch(orderActions.startLoading());\n            _context.prev = 1;\n            orderToCreate = {\n              items: items,\n              total: total,\n              status: 'Оформлен',\n              date: +new Date()\n            };\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(ordersAPI.addOrder(orderToCreate));\n\n          case 5:\n            newOrder = _context.sent;\n            dispatch(orderActions.orderAdded(newOrder));\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](1);\n            dispatch(orderActions.setError(_context.t0.message));\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 9]], Promise);\n  };\n};\nexport var getOrders = function getOrders() {\n  return function _callee2(dispatch) {\n    var ordersFromServer;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            dispatch(orderActions.startLoading());\n            _context2.prev = 1;\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(ordersAPI.getOrders());\n\n          case 4:\n            ordersFromServer = _context2.sent;\n            dispatch(orderActions.setOrders(ordersFromServer));\n            _context2.next = 11;\n            break;\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](1);\n            dispatch(orderActions.setError(_context2.t0.message));\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[1, 8]], Promise);\n  };\n};\nexport default orderSlice.reducer;","map":{"version":3,"sources":["/Users/alisia/Projects/ReactNative/shop/store/orders.slice.js"],"names":["createSlice","ordersAPI","initialState","orders","isLoading","error","isSuccessed","orderSlice","name","reducers","startLoading","state","console","log","setError","payload","setOrders","orderAdded","push","orderActions","actions","addOrder","items","total","dispatch","orderToCreate","status","date","Date","newOrder","message","getOrders","ordersFromServer","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { ordersAPI } from '../fetchAPI';\n\nconst initialState = {\n  orders: [],\n  isLoading: false,\n  error: null,\n  isSuccessed: false,\n};\n\nconst orderSlice = createSlice({\n  name: 'orders',\n  initialState,\n  reducers: {\n    startLoading: (state) => {\n      console.log('Is Loading was set');\n      state.isLoading = true;\n      state.error = null;\n      state.isSuccessed = false;\n    },\n    setError: (state, { payload }) => {\n      state.error = payload;\n      state.isLoading = false;\n      state.isSuccessed = false;\n    },\n    setOrders: (state, { payload }) => {\n      state.orders = payload;\n      state.isLoading = false;\n      state.error = null;\n      state.isSuccessed = false;\n    },\n    orderAdded: (state, { payload }) => {\n      // @ts-ignore\n      state.orders.push(payload);\n      state.isLoading = false;\n      state.error = null;\n      state.isSuccessed = true;\n    },\n  },\n});\n\nexport const orderActions = orderSlice.actions;\n\nexport const addOrder = ({ items, total }) => {\n  return async (dispatch) => {\n    dispatch(orderActions.startLoading());\n    try {\n      const orderToCreate = { items, total, status: 'Оформлен', date: +new Date() };\n      const newOrder = await ordersAPI.addOrder(orderToCreate);\n      dispatch(orderActions.orderAdded(newOrder));\n    } catch (err) {\n      dispatch(orderActions.setError(err.message));\n    }\n  };\n};\n\nexport const getOrders = () => async (dispatch) => {\n  dispatch(orderActions.startLoading());\n  try {\n    const ordersFromServer = await ordersAPI.getOrders();\n    dispatch(orderActions.setOrders(ordersFromServer));\n  } catch (err) {\n    dispatch(orderActions.setError(err.message));\n  }\n};\n\nexport default orderSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}