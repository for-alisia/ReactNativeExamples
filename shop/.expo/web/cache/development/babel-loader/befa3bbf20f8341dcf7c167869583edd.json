{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/alisia/Projects/ReactNative/shop/screens/user/AuthScreen.jsx\";\n\nimport React, { useCallback, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { AntDesign } from '@expo/vector-icons';\nimport { SbText, SbInput, SbCard, SbHeading, SbBottomButton, SbLink } from \"../../components/ui\";\nimport useInput from \"../../hooks/useInput\";\nimport { isRequired, isLonger, isEmail } from \"../../utils/validators\";\nimport theme from \"../../theme\";\n\nvar softReset = function softReset(input) {\n  if (input.hasError && input.value.trim() === '') {\n    input.reset();\n  }\n};\n\nvar AuthScreen = function AuthScreen() {\n  var login = useInput(isEmail);\n  var password = useInput(isLonger.bind(null, 5));\n  var name = useInput(isRequired);\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoginMode = _useState2[0],\n      setIsLoginMode = _useState2[1];\n\n  var isValid = isLoginMode ? login.isValid && password.isValid : login.isValid && password.isValid && name.isValid;\n\n  var toSignupHandler = function toSignupHandler() {\n    setIsLoginMode(false);\n    softReset(login);\n    softReset(password);\n  };\n\n  var toLoginHandler = function toLoginHandler() {\n    setIsLoginMode(true);\n    softReset(name);\n    softReset(login);\n    softReset(password);\n  };\n\n  var submitHandler = useCallback(function () {\n    if (!isValid) {\n      Alert.alert('Некорректная форма', 'Проверьте правильность заполнения полей формы', [{\n        text: 'OK'\n      }]);\n      return;\n    }\n\n    console.log('Submit form!');\n    login.reset();\n    password.reset();\n    name.reset();\n  }, [isValid, login.value, login.isValid, password.value, password.isValid, name.value, name.isValid]);\n  return React.createElement(KeyboardAvoidingView, {\n    behavior: \"padding\",\n    keyboardVerticalOffset: -200,\n    style: styles.screen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, React.createElement(ScrollView, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.wrapper,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, React.createElement(SbHeading, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, \"\\u0410\\u0432\\u0442\\u043E\\u0440\\u0438\\u0437\\u0430\\u0446\\u0438\\u044F\"), React.createElement(View, {\n    style: styles.cardWrapper,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, React.createElement(SbCard, {\n    style: styles.authCard,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, !isLoginMode && React.createElement(SbInput, {\n    label: \"\\u0418\\u043C\\u044F\",\n    errorText: \"\\u0423\\u043A\\u0430\\u0436\\u0438\\u0442\\u0435 \\u0432\\u0430\\u0448\\u0435 \\u0438\\u043C\\u044F\",\n    value: name.value,\n    hasError: name.hasError,\n    onChangeHandler: name.onChangeText,\n    onBlurHandler: name.onBlur,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }), React.createElement(SbInput, {\n    label: \"Email\",\n    errorText: \"\\u0423\\u043A\\u0430\\u0436\\u0438\\u0442\\u0435 email\",\n    value: login.value,\n    hasError: login.hasError,\n    onChangeHandler: login.onChangeText,\n    onBlurHandler: login.onBlur,\n    autoCapitalize: \"none\",\n    keyboardType: \"email-address\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }), React.createElement(SbInput, {\n    label: \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C\",\n    errorText: \"\\u0423\\u043A\\u0430\\u0436\\u0438\\u0442\\u0435 \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C (\\u0431\\u043E\\u043B\\u0435\\u0435 5 \\u0441\\u0438\\u043C\\u0432\\u043E\\u043B\\u043E\\u0432)\",\n    value: password.value,\n    hasError: password.hasError,\n    onChangeHandler: password.onChangeText,\n    onBlurHandler: password.onBlur,\n    autoCapitalize: \"none\",\n    secureTextEntry: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 15\n    }\n  }), isLoginMode ? React.createElement(SbLink, {\n    style: styles.linkStyle,\n    onPress: toSignupHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }, \"\\u041D\\u0435\\u0442 \\u0430\\u043A\\u043A\\u0430\\u0443\\u043D\\u0442\\u0430? \\u0417\\u0430\\u0440\\u0435\\u0433\\u0438\\u0441\\u0442\\u0440\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\\u0441\\u044F\") : React.createElement(SbLink, {\n    style: styles.linkStyle,\n    onPress: toLoginHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }\n  }, \"\\u0415\\u0441\\u0442\\u044C \\u0430\\u043A\\u043A\\u0430\\u0443\\u043D\\u0442? \\u0412\\u043E\\u0439\\u0442\\u0438\"))))), React.createElement(SbBottomButton, {\n    onPress: submitHandler,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.buttonContent,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, React.createElement(SbText, {\n    style: styles.textButton,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }, isLoginMode ? 'Войти' : 'Регистрация'), React.createElement(AntDesign, {\n    name: \"login\",\n    size: 24,\n    color: theme.colors.light,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }))));\n};\n\nAuthScreen.navigationOptions = function (navData) {\n  return {\n    headerTitle: 'Авторизация'\n  };\n};\n\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1\n  },\n  wrapper: {\n    padding: theme.padding.m,\n    flex: 1\n  },\n  cardWrapper: {\n    flexDirection: 'row',\n    marginTop: theme.margin.xl\n  },\n  authCard: {\n    padding: theme.padding.xl\n  },\n  linkStyle: {\n    marginTop: theme.margin.xl\n  },\n  buttonContent: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  textButton: {\n    color: theme.colors.light,\n    marginRight: theme.margin.m\n  }\n});\nexport default AuthScreen;","map":{"version":3,"sources":["/Users/alisia/Projects/ReactNative/shop/screens/user/AuthScreen.jsx"],"names":["React","useCallback","useState","AntDesign","SbText","SbInput","SbCard","SbHeading","SbBottomButton","SbLink","useInput","isRequired","isLonger","isEmail","theme","softReset","input","hasError","value","trim","reset","AuthScreen","login","password","bind","name","isLoginMode","setIsLoginMode","isValid","toSignupHandler","toLoginHandler","submitHandler","Alert","alert","text","console","log","styles","screen","wrapper","cardWrapper","authCard","onChangeText","onBlur","linkStyle","buttonContent","textButton","colors","light","navigationOptions","navData","headerTitle","StyleSheet","create","flex","padding","m","flexDirection","marginTop","margin","xl","justifyContent","alignItems","color","marginRight"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react';\nimport { View, StyleSheet, ScrollView, KeyboardAvoidingView, Alert } from 'react-native';\nimport { AntDesign } from '@expo/vector-icons';\n\n// Conmponents\nimport { SbText, SbInput, SbCard, SbHeading, SbBottomButton, SbLink } from '../../components/ui';\n\n// Hooks\nimport useInput from '../../hooks/useInput';\n\n// Validators\nimport { isRequired, isLonger, isEmail } from '../../utils/validators';\n\n// Theme\nimport theme from '../../theme';\n\nconst softReset = (input) => {\n  if (input.hasError && input.value.trim() === '') {\n    input.reset();\n  }\n};\n\nconst AuthScreen = () => {\n  const login = useInput(isEmail);\n  const password = useInput(isLonger.bind(null, 5));\n  const name = useInput(isRequired);\n\n  const [isLoginMode, setIsLoginMode] = useState(true);\n\n  const isValid = isLoginMode\n    ? login.isValid && password.isValid\n    : login.isValid && password.isValid && name.isValid;\n\n  const toSignupHandler = () => {\n    setIsLoginMode(false);\n    softReset(login);\n    softReset(password);\n  };\n\n  const toLoginHandler = () => {\n    setIsLoginMode(true);\n    softReset(name);\n    softReset(login);\n    softReset(password);\n  };\n\n  const submitHandler = useCallback(() => {\n    if (!isValid) {\n      Alert.alert('Некорректная форма', 'Проверьте правильность заполнения полей формы', [\n        { text: 'OK' },\n      ]);\n      return;\n    }\n    // Submit form and go to main page\n    console.log('Submit form!');\n    login.reset();\n    password.reset();\n    name.reset();\n  }, [\n    isValid,\n    login.value,\n    login.isValid,\n    password.value,\n    password.isValid,\n    name.value,\n    name.isValid,\n  ]);\n\n  return (\n    <KeyboardAvoidingView behavior=\"padding\" keyboardVerticalOffset={-200} style={styles.screen}>\n      <ScrollView>\n        <View style={styles.wrapper}>\n          <SbHeading>Авторизация</SbHeading>\n          <View style={styles.cardWrapper}>\n            <SbCard style={styles.authCard}>\n              {!isLoginMode && (\n                <SbInput\n                  label=\"Имя\"\n                  errorText=\"Укажите ваше имя\"\n                  value={name.value}\n                  hasError={name.hasError}\n                  onChangeHandler={name.onChangeText}\n                  onBlurHandler={name.onBlur}\n                />\n              )}\n              <SbInput\n                label=\"Email\"\n                errorText=\"Укажите email\"\n                value={login.value}\n                hasError={login.hasError}\n                onChangeHandler={login.onChangeText}\n                onBlurHandler={login.onBlur}\n                autoCapitalize=\"none\"\n                keyboardType=\"email-address\"\n              />\n              <SbInput\n                label=\"Пароль\"\n                errorText=\"Укажите пароль (более 5 символов)\"\n                value={password.value}\n                hasError={password.hasError}\n                onChangeHandler={password.onChangeText}\n                onBlurHandler={password.onBlur}\n                autoCapitalize=\"none\"\n                secureTextEntry\n              />\n              {isLoginMode ? (\n                <SbLink style={styles.linkStyle} onPress={toSignupHandler}>\n                  Нет аккаунта? Зарегистрироваться\n                </SbLink>\n              ) : (\n                <SbLink style={styles.linkStyle} onPress={toLoginHandler}>\n                  Есть аккаунт? Войти\n                </SbLink>\n              )}\n            </SbCard>\n          </View>\n        </View>\n      </ScrollView>\n      <SbBottomButton onPress={submitHandler}>\n        <View style={styles.buttonContent}>\n          <SbText style={styles.textButton}>{isLoginMode ? 'Войти' : 'Регистрация'}</SbText>\n          <AntDesign name=\"login\" size={24} color={theme.colors.light} />\n        </View>\n      </SbBottomButton>\n    </KeyboardAvoidingView>\n  );\n};\n\nAuthScreen.navigationOptions = (navData) => {\n  return {\n    headerTitle: 'Авторизация',\n  };\n};\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n  },\n  wrapper: {\n    padding: theme.padding.m,\n    flex: 1,\n  },\n  cardWrapper: {\n    flexDirection: 'row',\n    marginTop: theme.margin.xl,\n  },\n  authCard: {\n    padding: theme.padding.xl,\n  },\n  linkStyle: {\n    marginTop: theme.margin.xl,\n  },\n  buttonContent: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n\n  textButton: {\n    color: theme.colors.light,\n    marginRight: theme.margin.m,\n  },\n});\n\nexport default AuthScreen;\n"]},"metadata":{},"sourceType":"module"}