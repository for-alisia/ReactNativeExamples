{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { productActions } from \"./products.slice\";\nvar initialState = {\n  items: {},\n  total: 0\n};\nvar cartSlice = createSlice({\n  name: 'cart',\n  initialState: initialState,\n  reducers: {\n    addToCart: function addToCart(state, _ref) {\n      var payload = _ref.payload;\n      var price = payload.price,\n          title = payload.title,\n          imageUrl = payload.imageUrl,\n          id = payload.id;\n\n      if (state.items[id]) {\n        state.items[id].quantity++;\n        state.items[id].sum += price;\n      } else {\n        var newItemInCart = {\n          price: price,\n          title: title,\n          imageUrl: imageUrl,\n          quantity: 1,\n          sum: price\n        };\n        state.items[id] = newItemInCart;\n      }\n\n      state.total += price;\n    },\n    deleteFromCart: function deleteFromCart(state, _ref2) {\n      var payload = _ref2.payload;\n      var id = payload;\n      deleteItem(id, state);\n    },\n    substractFromCart: function substractFromCart(state, _ref3) {\n      var payload = _ref3.payload;\n      var id = payload;\n      var currentQty = state.items[id].quantity;\n\n      if (currentQty === 1) {\n        deleteItem(id, state);\n      } else {\n        state.items[id].quantity--;\n        state.items[id].sum -= state.items[id].price;\n        state.total -= state.items[id].price;\n      }\n    },\n    increaseInCart: function increaseInCart(state, _ref4) {\n      var payload = _ref4.payload;\n      var id = payload;\n      state.items[id].quantity++;\n      state.items[id].sum += state.items[id].price;\n      state.total += state.items[id].price;\n    },\n    clearCart: function clearCart(state) {\n      state.items = {};\n      state.total = 0;\n    }\n  },\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(productActions.productDeleted, function (state, _ref5) {\n      var payload = _ref5.payload;\n      var id = payload;\n\n      if (state.items[id]) {\n        deleteItem(id, state);\n      }\n    });\n  }\n});\n\nfunction deleteItem(id, state) {\n  var sumToDelete = state.items[id].sum;\n  delete state.items[id];\n  state.total -= sumToDelete;\n}\n\nexport var cartActions = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/Users/alisia/Projects/ReactNative/shop/store/cart.slice.js"],"names":["createSlice","productActions","initialState","items","total","cartSlice","name","reducers","addToCart","state","payload","price","title","imageUrl","id","quantity","sum","newItemInCart","deleteFromCart","deleteItem","substractFromCart","currentQty","increaseInCart","clearCart","extraReducers","builder","addCase","productDeleted","sumToDelete","cartActions","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\n// Actions from other slices\nimport { productActions } from './products.slice';\n\nconst initialState = {\n  items: {},\n  total: 0,\n};\n\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addToCart: (state, { payload }) => {\n      const { price, title, imageUrl, id } = payload;\n\n      if (state.items[id]) {\n        state.items[id].quantity++;\n        state.items[id].sum += price;\n      } else {\n        const newItemInCart = {\n          price,\n          title,\n          imageUrl,\n          quantity: 1,\n          sum: price,\n        };\n        state.items[id] = newItemInCart;\n      }\n      state.total += price;\n    },\n    deleteFromCart: (state, { payload }) => {\n      const id = payload;\n      deleteItem(id, state);\n    },\n    substractFromCart: (state, { payload }) => {\n      const id = payload;\n      const currentQty = state.items[id].quantity;\n      if (currentQty === 1) {\n        deleteItem(id, state);\n      } else {\n        state.items[id].quantity--;\n        state.items[id].sum -= state.items[id].price;\n        state.total -= state.items[id].price;\n      }\n    },\n    increaseInCart: (state, { payload }) => {\n      const id = payload;\n      state.items[id].quantity++;\n      state.items[id].sum += state.items[id].price;\n      state.total += state.items[id].price;\n    },\n    clearCart: (state) => {\n      state.items = {};\n      state.total = 0;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(productActions.productDeleted, (state, { payload }) => {\n      const id = payload;\n      if (state.items[id]) {\n        deleteItem(id, state);\n      }\n    });\n  },\n});\n\nfunction deleteItem(id, state) {\n  const sumToDelete = state.items[id].sum;\n  delete state.items[id];\n  state.total -= sumToDelete;\n}\n\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}