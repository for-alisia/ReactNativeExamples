{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar ordersAPI = {\n  baseUrl: 'https://react-4866c-default-rtdb.europe-west1.firebasedatabase.app/',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  getOrders: function getOrders() {\n    var response, resData, loadedOrders, key;\n    return _regeneratorRuntime.async(function getOrders$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch(this.baseUrl + \"orders.json\"));\n\n          case 3:\n            response = _context.sent;\n\n            if (response.ok) {\n              _context.next = 6;\n              break;\n            }\n\n            throw new Error('Ошибка получения заказов');\n\n          case 6:\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 8:\n            resData = _context.sent;\n            loadedOrders = [];\n\n            for (key in resData) {\n              loadedOrders.push(_objectSpread({\n                id: key\n              }, resData[key]));\n            }\n\n            return _context.abrupt(\"return\", loadedOrders);\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](0);\n            throw _context.t0;\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, this, [[0, 14]], Promise);\n  },\n  addOrder: function addOrder(order) {\n    var response, resData;\n    return _regeneratorRuntime.async(function addOrder$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(fetch(this.baseUrl + \"orders.json\", {\n              method: 'POST',\n              headers: this.headers,\n              body: JSON.stringify(order)\n            }));\n\n          case 3:\n            response = _context2.sent;\n\n            if (response.ok) {\n              _context2.next = 6;\n              break;\n            }\n\n            throw new Error('Ошибка размещения заказа');\n\n          case 6:\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 8:\n            resData = _context2.sent;\n            return _context2.abrupt(\"return\", _objectSpread(_objectSpread({}, order), {}, {\n              id: resData.name\n            }));\n\n          case 12:\n            _context2.prev = 12;\n            _context2.t0 = _context2[\"catch\"](0);\n            throw _context2.t0;\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, this, [[0, 12]], Promise);\n  }\n};\nexport default ordersAPI;","map":{"version":3,"sources":["/Users/alisia/Projects/ReactNative/shop/fetchAPI/ordersAPI.js"],"names":["ordersAPI","baseUrl","headers","getOrders","fetch","response","ok","Error","json","resData","loadedOrders","key","push","id","addOrder","order","method","body","JSON","stringify","name"],"mappings":";;;;;;;AAAA,IAAMA,SAAS,GAAG;AAChBC,EAAAA,OAAO,EAAE,qEADO;AAEhBC,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT,GAFO;AAKVC,EAAAA,SALU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAOWC,KAAK,CAAI,KAAKH,OAAT,iBAPhB;;AAAA;AAONI,YAAAA,QAPM;;AAAA,gBAQPA,QAAQ,CAACC,EARF;AAAA;AAAA;AAAA;;AAAA,kBASJ,IAAIC,KAAJ,CAAU,0BAAV,CATI;;AAAA;AAAA;AAAA,6CAWUF,QAAQ,CAACG,IAAT,EAXV;;AAAA;AAWNC,YAAAA,OAXM;AAaNC,YAAAA,YAbM,GAaS,EAbT;;AAeZ,iBAASC,GAAT,IAAgBF,OAAhB,EAAyB;AACvBC,cAAAA,YAAY,CAACE,IAAb;AAAoBC,gBAAAA,EAAE,EAAEF;AAAxB,iBAAgCF,OAAO,CAACE,GAAD,CAAvC;AACD;;AAjBW,6CAmBLD,YAnBK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBVI,EAAAA,QAxBU,oBAwBDC,KAxBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CA0BWX,KAAK,CAAI,KAAKH,OAAT,kBAA+B;AACzDe,cAAAA,MAAM,EAAE,MADiD;AAEzDd,cAAAA,OAAO,EAAE,KAAKA,OAF2C;AAGzDe,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,KAAf;AAHmD,aAA/B,CA1BhB;;AAAA;AA0BNV,YAAAA,QA1BM;;AAAA,gBAgCPA,QAAQ,CAACC,EAhCF;AAAA;AAAA;AAAA;;AAAA,kBAiCJ,IAAIC,KAAJ,CAAU,0BAAV,CAjCI;;AAAA;AAAA;AAAA,6CAoCUF,QAAQ,CAACG,IAAT,EApCV;;AAAA;AAoCNC,YAAAA,OApCM;AAAA,8EAsCAM,KAtCA;AAsCOF,cAAAA,EAAE,EAAEJ,OAAO,CAACW;AAtCnB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlB;AA6CA,eAAepB,SAAf","sourcesContent":["const ordersAPI = {\n  baseUrl: 'https://react-4866c-default-rtdb.europe-west1.firebasedatabase.app/',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  async getOrders() {\n    try {\n      const response = await fetch(`${this.baseUrl}orders.json`);\n      if (!response.ok) {\n        throw new Error('Ошибка получения заказов');\n      }\n      const resData = await response.json();\n\n      const loadedOrders = [];\n\n      for (let key in resData) {\n        loadedOrders.push({ id: key, ...resData[key] });\n      }\n\n      return loadedOrders;\n    } catch (err) {\n      throw err;\n    }\n  },\n  async addOrder(order) {\n    try {\n      const response = await fetch(`${this.baseUrl}orders.json`, {\n        method: 'POST',\n        headers: this.headers,\n        body: JSON.stringify(order),\n      });\n\n      if (!response.ok) {\n        throw new Error('Ошибка размещения заказа');\n      }\n\n      const resData = await response.json();\n\n      return { ...order, id: resData.name };\n    } catch (err) {\n      throw err;\n    }\n  },\n};\n\nexport default ordersAPI;\n"]},"metadata":{},"sourceType":"module"}